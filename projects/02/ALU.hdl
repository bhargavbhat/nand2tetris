// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:

    // Preset x
    Mux16(a=x, b=false, sel=zx, out=zerox);
    Not16(in=zerox, out=bitnegx);
    Mux16(a=zerox, b=bitnegx, sel=nx, out=presetx);

    // Preset y
    Mux16(a=y, b=false, sel=zy, out=zeroy);
    Not16(in=zeroy, out=bitnegy);
    Mux16(a=zeroy, b=bitnegy, sel=ny, out=presety);

    // Arithmetic (add)
    Add16(a=presetx, b=presety, out=pxpluspy);

    // Logical (and)
    And16(a=presetx, b=presety, out=pxandpy);

    // Final out
    Mux16(a=pxandpy, b=pxpluspy, sel=f, out=fout);
    Not16(in=fout, out=bitnegfout);
    Mux16(a=fout, b=bitnegfout, sel=no, out[0..7]=lonib, out[8..15]=hinib, out[15]=sign, out=out);
    
    // Control Signal ng
    // Can't use hinib[7] due to "sub bus of an internal node..." error in Simulator
    And(a=sign, b=true, out=ng);

    // Control Signal zr
    // Simulator not picking up NOR gate from Custom folder
    Or8Way(in=lonib, out=lz);    // find out if lower nibble is all zeros
    Or8Way(in=hinib, out=hz);    // find out if higher nibbler is all zeros
    Or(a=lz, b=hz, out=allzero); // find out if entire 16bit number is all zeros
    Not(in=allzero, out=zr);

}
